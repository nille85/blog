package be.nille.blog;

import be.nille.blog.component.Page;
import be.nille.blog.component.home.HomePage;
import be.nille.blog.component.login.LoginTemplate;
import be.nille.blog.component.post.PostCommentRequest;
import be.nille.blog.component.post.PostPage;
import be.nille.blog.config.ServerPort;
import be.nille.blog.config.SimpleServerPort;
import be.nille.request.SparkRequestBody;
import be.nille.request.SparkRequest;
import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.client.MongoDatabase;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.RouteImpl;
import spark.Service;
import static spark.Spark.before;
import static spark.Spark.exception;
import static spark.Spark.get;
import static spark.Spark.halt;
import static spark.Spark.port;
import static spark.Spark.post;
import static spark.Spark.redirect;
import static spark.Spark.staticFiles;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
@Slf4j
public class App {

    private final String databaseURL;

    public App(final String databaseURL) {
        this.databaseURL = databaseURL;
    }

    public MongoDatabase getDatabase() {

        MongoClient mongoClient = new MongoClient(
                new MongoClientURI(databaseURL)
        );
        MongoDatabase db = mongoClient.getDatabase("openid-connect");
        return db;
    }

    public static void main(String[] args) throws Exception {
        
        App app = new App(System.getenv("MONGO_URL"));
        
        ServerPort port = new SimpleServerPort(System.getenv("PORT"));
        Service service = Service.ignite();
        service.staticFileLocation("/public");
        service.port(port.getValue());


        service.redirect.get("/", "/posts");

        service.get("/posts", (request, response) -> {
            Page page = new HomePage(app.getDatabase());
            return page.handleRequest(request, response);
        }
        );

        service.get("/posts/:id", (request, response) -> {
            Page page = new PostPage(app.getDatabase());
            return page.handleRequest(request, response);
        });
        
               

        service.post("posts/:id", (request, response) -> {
            SparkRequest<PostCommentRequest> req = new SparkRequestBody(request);
            PostCommentRequest pcr = req.populateObject(new PostCommentRequest());
            
    
            return pcr.getId() + ":" + pcr.getAuthor() + ":" + pcr.getComment();
        });
        
        
        service.get("/login", (request, response) -> {
            return new LoginTemplate().render();
        });

        service.before("/protected/*", (request, response) -> {
            /*
            if not authenticated redirect to login
            */
           
            response.redirect("/login");
        });

        service.exception(RuntimeException.class, (exception, request, response) -> {
            log.error(exception.getMessage());
        });
        
    }

}
